#!/usr/bin/env python
# encoding: utf-8

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

# Perform an SDSS-V simulation

import os
import argparse
import time
import numpy as np
import fitsio
import observesim.weather
import roboscheduler.scheduler
import observesim.observe
from observesim import simulation



def runSim(args):
    """ run a simulation
    """
    # ###################
    # make sure this starts a clean slate every run!
    # ###################
    idx, base, plan, observatory, schedule = args

    time.sleep(idx)  # hopefully that avoids read conflicts? xD 
    print("running sim ", idx)

    sim = simulation.Simulation(base, plan, observatory, idx=idx, schedule=schedule)

    startTime = time.time()
    # Loop through nights
    for mjd in sim.scheduler.mjds:
        # uncomment to do a quick check
        if mjd > 59200:
            continue
        sim.observeMJD(mjd)
    print("skipped for physical obstructions", sim.hit_lims)
    endTime = time.time()

    # assert len(lsts) == len(observed), "lst tracking munged"
    # with open("{base}lst_tracking_{idx}.dat".format(base=base, idx=idx), "w") as df:
    #     print("lst, obs", file=df)
    #     for l, o in zip(lsts, observed):
    #         print("{}, {}".format(l, o), file=df)

    # with open("{base}weather_tracking_{idx}.dat".format(base=base, idx=idx), "w") as df:
    #     print("mjd, length, observed", file=df)
    #     for m, o in weather_used.items():
    #         print("{}, {}, {}".format(m, o["length"], o["observed"]), file=df)

    print("{} completed in {}".format(idx, endTime-startTime))

    outobstemplate = "{base}{plan}-{observatory}-observations-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.scheduler.observations.toarray(),
                 clobber=True)

    outobstemplate = "{base}{plan}-{observatory}-fields-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.scheduler.fields.toarray(),
                 clobber=True)

# Read arguments
usage = "sdss5_simulate"
description = "Simulate the SDSS-V schedule"
parser = argparse.ArgumentParser(description=description, usage=usage)
parser.add_argument("-b", "--base", dest="base", type=str,
                    required=True, help="output FITS base name")
parser.add_argument("-p", "--plan", dest="plan", type=str,
                    required=False, help="design plan",
                    default='plan-0')
parser.add_argument("-t", "--telescope", dest="telescope", type=str,
                    required=False, help="telescope ('apo' or 'lco')",
                    default='apo')
parser.add_argument("-n", "--number", dest="number", type=int,
                    required=False, help="number of runs",
                    default=10)
parser.add_argument("-m", "--multi", dest="multi", type=int,
                    required=False, help="number of processes to use",
                    default=-1)
parser.add_argument("-v", "--version", dest="version", type=str,
                    required=False, help="use versioned directory for output",
                    default=None)
parser.add_argument("-s", "--schedule", dest="schedule", type=str,
                    required=False, help="master schedule to use",
                    default="normal")
args = parser.parse_args()
base = args.base
plan = args.plan
observatory = args.telescope
number = args.number
multi = args.multi
version = args.version
schedule = args.schedule

if version is not None:
    base = os.path.join(base, version)
    try:
        os.makedirs(base)
    except:
        pass
    base += "/"

if multi == -1:
    for i in range(number):
        runSim((i, base, plan, observatory, schedule))

else:
    assert multi > 1, "must use more than 1 process for multi argument"
    from multiprocessing import Pool

    pool = Pool(multi)

    result = pool.map(runSim, ((i, base, plan, observatory, schedule) for i in range(number)))

    pool.close()
    pool.join()
    pool.terminate()
