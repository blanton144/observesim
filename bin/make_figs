#! /usr/bin/env python

import time
import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
import fitsio
import yaml

from observesim.output import cumulativePlot, doHist, plotTargMetric, writeWebPage, countFields


def str2bool(v):
    if isinstance(v, bool):
       return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


if __name__ == "__main__":
    usage = "make_figs"
    description = "Post processing for observesim, make figs and webpage"
    parser = argparse.ArgumentParser(description=description, usage=usage)
    parser.add_argument("-b", "--base", dest="base", type=str,
                        required=True, help="output FITS base name")
    parser.add_argument("-r", "--rsbase", dest="rs_base", type=str,
                        required=False, help="location of rs files if not specified in env",
                        default=None)
    parser.add_argument("-p", "--plan", dest="plan", type=str,
                        required=False, help="design plan",
                        default='plan-0')
    parser.add_argument("-v", "--version", dest="version", type=str,
                        required=False, help="use versioned directory for output",
                        default=None)
    parser.add_argument("-c", "--count", dest="count", type=str2bool,
                        required=False, help="redo post-processing file creation, adds 15+ min",
                        default=True)
    args = parser.parse_args()
    base = args.base
    plan = args.plan
    version = args.version
    rs_base = args.rs_base
    recount = args.count

    if rs_base is None:
        rs_base = os.getenv('OBSERVING_PLAN_DIR') + "/"

    if recount:
        print("post processing for {}".format(plan))
        countFields(base, rs_base, plan, version=version, loc="apo", N=0)
        countFields(base, rs_base, plan, version=version, loc="lco", N=0)

    print("drawing cumulativePlot for {}".format(plan))
    cumulativePlot(base, plan, version=version, loc="lco")
    cumulativePlot(base, plan, version=version, loc="apo")

    print("drawing old figs for {}".format(plan))
    doHist(base, rs_base, plan, version=version, loc="lco")
    doHist(base, rs_base, plan, version=version, loc="apo")

    print("creating target metrics for {}".format(plan))
    plotTargMetric(base, rs_base, plan, version=version, reqs_file=None)

    print("writing webpage for {}".format(plan))
    with open(os.path.join(base, plan) + "/summary.html", "w") as html_file:
        print(writeWebPage(base, plan), file=html_file)

    # print("finished!")
