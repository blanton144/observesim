#! /usr/bin/env python

import os
import subprocess
import argparse

from observesim.animateSurvey import CountFramesAllSky

def str2bool(v):
    if isinstance(v, bool):
       return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


if __name__ == "__main__":
    usage = "make_figs"
    description = "Post processing for observesim, make figs and webpage"
    parser = argparse.ArgumentParser(description=description, usage=usage)
    parser.add_argument("-b", "--base", dest="base", type=str,
                        required=False, help="output FITS base name",
                        default=None)
    parser.add_argument("-r", "--rsbase", dest="rs_base", type=str,
                        required=False, help="location of rs files if not specified in env",
                        default=None)
    parser.add_argument("-p", "--plan", dest="plan", type=str,
                        required=False, help="design plan",
                        default='plan-0')
    parser.add_argument("-v", "--version", dest="version", type=str,
                        required=False, help="use versioned directory for output",
                        default=None)
    parser.add_argument("-c", "--count", dest="count", type=str2bool,
                        required=False, help="redo post-processing file creation, adds 15+ min",
                        default=True)
    args = parser.parse_args()
    base = args.base
    plan = args.plan
    version = args.version
    rs_base = args.rs_base
    recount = args.count

    if base is None:
        base = os.getenv("OBSERVESIM_OUTPUT_BASE")

    if rs_base is None:
        rs_base = os.getenv('OBSERVING_PLAN_DIR') + "/"

    assert base is not None, "must specify result base"
    assert rs_base is not None, "must specify roboscheduler result base"

    movieFrameDir = CountFramesAllSky(base, plan, version=version)

    # now makes mp4 file from frames in FramesForMP4 dir
    os.chdir(movieFrameDir)
    subprocess.call('ffmpeg -r 10 -i frame%03d.png -vcodec mpeg4 -y sdss5_sim.mp4', shell=True)

    print("finished!")
