#!/usr/bin/env python
# encoding: utf-8

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

# Perform an SDSS-V simulation

import argparse
import numpy as np
import fitsio
import observesim.weather
import observesim.scheduler
import observesim.observe

# Read arguments
usage = "sdss5_simulate"
description = "Simulate the SDSS-V schedule"
parser = argparse.ArgumentParser(description=description, usage=usage)
parser.add_argument("-b", "--base", dest="base", type=str,
                    required=True, help="output FITS base name")
parser.add_argument("-p", "--plan", dest="plan", type=str,
                    required=False, help="tiling plan",
                    default='plan-0')
parser.add_argument("-s", "--seed", dest="seed", type=int,
                    required=False, help="random seed",
                    default=1)
parser.add_argument("-t", "--telescope", dest="telescope", type=str,
                    required=False, help="telescope ('apo' or 'lco')",
                    default='apo')
args = parser.parse_args()
base = args.base
plan = args.plan
seed = args.seed
observatory = args.telescope
if(observatory == 'apo'):
    fclear = 0.5
if(observatory == 'lco'):
    fclear = 0.7

# Set up schedule and weather
scheduler = observesim.scheduler.Scheduler(observatory=observatory)
weather = observesim.weather.Weather(mjd_start=scheduler.start,
                                     mjd_end=scheduler.end,
                                     seed=seed, fclear=fclear)
observe = observesim.observe.Observe()

# Initialize observedb
scheduler.initdb(tiling=plan)
scheduler.set_priority_all(scheduler.mjds[0])

# Loop through nights
for mjd in scheduler.mjds:
    mjd_evening_twilight = scheduler.evening_twilight(mjd)
    mjd_morning_twilight = scheduler.morning_twilight(mjd)
    curr_mjd = mjd_evening_twilight
    print(curr_mjd)
    while(curr_mjd < mjd_morning_twilight and
          curr_mjd < scheduler.end_mjd()):
        isclear, nextchange_weather = weather.clear(mjd=curr_mjd)
        onoff, nextchange_on = scheduler.on(mjd=curr_mjd)
        nextchange_all = np.array([nextchange_weather, nextchange_on])
        nextchange = np.min(nextchange_all)
        if((isclear == True) and (onoff == 'on')):
            tileid = scheduler.nexttile(mjd=curr_mjd)
            if(tileid is not None):
                duration = scheduler.tile.duration[tileid]
                curr_mjd = curr_mjd + duration
                if(curr_mjd > nextchange):
                    duration = (duration - (curr_mjd - nextchange))
                    curr_mjd = nextchange
                result = observe.result(mjd=curr_mjd, tileid=tileid,
                                        duration=duration)
                scheduler.update(tileid=tileid, result=result)
        else:
            if(nextchange > curr_mjd):
                curr_mjd = nextchange

outobstemplate = "{base}-{observatory}-observations.fits"
outobsfile = outobstemplate.format(base=base, observatory=observatory)
fitsio.write(outobsfile, scheduler.observations.toarray(),
             clobber=True)
